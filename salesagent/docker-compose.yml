services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: adcp
      POSTGRES_USER: adcp_user
      POSTGRES_PASSWORD: secure_password_change_me
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5435}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U adcp_user -d adcp"]
      interval: 10s
      timeout: 5s
      retries: 5

  adcp-server:
    build: .
    environment:
      # Database configuration
      DATABASE_URL: postgresql://adcp_user:secure_password_change_me@postgres:5432/adcp?sslmode=disable

      # Optional: Individual DB vars instead of DATABASE_URL
      # DB_TYPE: postgresql
      # DB_HOST: postgres
      # DB_PORT: 5432
      # DB_NAME: adcp
      # DB_USER: adcp_user
      # DB_PASSWORD: secure_password_change_me

      # Gemini API key (required for AI features)
      GEMINI_API_KEY: ${GEMINI_API_KEY}

      # Optional: Dry run mode
      # ADCP_DRY_RUN: true

    depends_on:
      postgres:
        condition: service_healthy

    ports:
      - "${ADCP_SALES_PORT:-8012}:8080"

    volumes:
      # Optional: Mount audit logs
      - ./audit_logs:/app/audit_logs

      # Optional: Mount for development
      # - .:/app

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  admin-ui:
    build: .
    command: python -m src.admin.server
    environment:
      DATABASE_URL: postgresql://adcp_user:secure_password_change_me@postgres:5432/adcp?sslmode=disable
      ADMIN_UI_PORT: ${ADMIN_UI_PORT:-8003}
      FLASK_ENV: production
      FLASK_DEBUG: ${FLASK_DEBUG:-0}
      FLASK_SECRET_KEY: ${FLASK_SECRET_KEY}
      # Gemini API key (required for AI features)
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      # Super admin authorization (set these via .env file)
      SUPER_ADMIN_EMAILS: ${SUPER_ADMIN_EMAILS}
      SUPER_ADMIN_DOMAINS: ${SUPER_ADMIN_DOMAINS}
      # Optional: Google OAuth credentials via environment
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET:-}
      GOOGLE_OAUTH_CREDENTIALS_FILE: ${GOOGLE_OAUTH_CREDENTIALS_FILE:-}
      # Test mode
      ADCP_AUTH_TEST_MODE: ${ADCP_AUTH_TEST_MODE:-false}

    depends_on:
      postgres:
        condition: service_healthy

    ports:
      - "${ADMIN_UI_PORT:-8003}:${ADMIN_UI_PORT:-8003}"

    volumes:
      # Mount OAuth credentials file
      # - ./client_secret.json:/app/client_secret.json:ro
      - ./audit_logs:/app/audit_logs

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${ADMIN_UI_PORT:-8003}/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ADK Agent with Context-Aware Recommendations
  adk-agent:
    build: .
    ports:
      - "${ADK_WEB_PORT:-8091}:8091"  # ADK Web UI
    environment:
      # Database configuration (for direct tool calls)
      DATABASE_URL: postgresql://adcp_user:secure_password_change_me@postgres:5432/adcp?sslmode=disable
      ADCP_AUTH_TOKEN: test-token-1234  # Default token for testing

      # Google AI for LLM
      GEMINI_API_KEY: ${GEMINI_API_KEY}

      # Logging
      LOG_LEVEL: info
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8091/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    # Run ADK web interface by default
    command: [".venv/bin/adk", "web", "src.adk.adcp_agent", "--host", "0.0.0.0", "--port", "8091"]

volumes:
  postgres_data:
